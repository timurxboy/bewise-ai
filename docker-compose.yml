services:

  postgres-db:
    image: postgres:15-alpine
    restart: always
    container_name: postgres-db
    environment:
      TZ: "Asia/Tashkent"
      PGTZ: "Asia/Tashkent"
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      command: postgres -c 'max_connections=1000'
    ports:
      - ${DB_PORT}:${DB_PORT}
    depends_on:
      - kafka
    volumes:
      - redd:/var/lib/postgresql/data
    env_file:
      - .env
    networks: [ "microservices" ]

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
    - ${KAFKA_PORT}:${KAFKA_PORT}
    depends_on:
    - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks: [ "microservices" ]
    healthcheck:
      test: [ "CMD", "/usr/bin/kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8086:8080" # Локальный порт 8086 перенаправлен на порт 8080 в контейнере
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks: [ "microservices" ]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks: [ "microservices" ]



  fastapi:
    build: .
    container_name: fastapi-app
    restart: always
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres-db
      DB_PORT: ${DB_PORT}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    networks: [ "microservices" ]


networks:
  microservices:
    name: microservices

volumes:
  redd: